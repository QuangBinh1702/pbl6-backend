/**
 * SEED TO√ÄN B·ªò DATABASE
 * Chuy·ªÉn ƒë·ªïi t·ª´ SQL (pbl6.sql) sang MongoDB
 * 
 * CH·∫†Y: node SEED_ALL.js
 */

require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

console.log('\n' + '='.repeat(70));
console.log('üöÄ SEED TO√ÄN B·ªò DATABASE - SQL ‚Üí MongoDB');
console.log('='.repeat(70) + '\n');

// K·∫øt n·ªëi MongoDB
async function connectDB() {
  const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017';
  const dbName = process.env.MONGODB_NAME || 'pbl6';
  
  let connectionString;
  if (mongoUri.includes('mongodb+srv://') || mongoUri.includes('mongodb://')) {
    // For MongoDB Atlas or full connection strings, use dbName as option
    connectionString = mongoUri;
    await mongoose.connect(connectionString, { dbName });
  } else {
    // For local MongoDB, append dbName to URI
    connectionString = `${mongoUri}/${dbName}`;
    await mongoose.connect(connectionString);
  }
  
  console.log(`‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng! Database: ${mongoose.connection.name}\n`);
}

// ƒê·ªãnh nghƒ©a inline schemas (tr√°nh conflict)
function defineSchemas() {
  // 1. Permission System
  const permissionDetailSchema = new mongoose.Schema({
    action_name: String,
    action_code: { type: String, uppercase: true },
    check_action: { type: Boolean, default: false },
    description: String
  });

  const permissionSchema = new mongoose.Schema({
    name_per: { type: String, unique: true, required: true },
    description: String,
    resource: String,
    action: String,
    details: [permissionDetailSchema],
    is_active: { type: Boolean, default: true }
  }, { timestamps: true, collection: 'permissions' });

  const userPermissionSchema = new mongoose.Schema({
    id_user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    id_per: { type: mongoose.Schema.Types.ObjectId, ref: 'Permission' },
    licensed: { type: Boolean, default: true },
    granted_at: { type: Date, default: Date.now },
    granted_by: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    expires_at: Date,
    notes: String
  }, { timestamps: true, collection: 'user_permissions' });

  // 2. User System
  const userSchema = new mongoose.Schema({
    username: { type: String, unique: true, required: true },
    password: { type: String, required: true },
    name: String,
    email: { type: String, unique: true, sparse: true },
    role: { 
      type: String, 
      enum: ['admin', 'ctsv', 'doantruong', 'hoisv', 'khoa', 'clb', 'student', 'loptruong'],
      default: 'student'
    },
    phone: String,
    active: { type: Boolean, default: true },
    isLocked: { type: Boolean, default: false }
  }, { timestamps: true, collection: 'users' });

  // 3. Student Profile
  const studentProfileSchema = new mongoose.Schema({
    user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    student_number: { type: String, unique: true, required: true },
    full_name: String,
    date_of_birth: Date,
    gender: String,
    email: String,
    phone: String,
    enrollment_year: Number,
    class_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Class' },
    contact_address: String,
    isClassMonitor: { type: Boolean, default: false }
  }, { timestamps: true, collection: 'student_profiles' });

  // 4. Staff Profile
  const staffProfileSchema = new mongoose.Schema({
    user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    staff_number: { type: String, unique: true, required: true },
    full_name: String,
    date_of_birth: Date,
    gender: String,
    email: String,
    phone: String,
    org_unit_id: { type: mongoose.Schema.Types.ObjectId, ref: 'OrgUnit' },
    contact_address: String
  }, { timestamps: true, collection: 'staff_profiles' });

  // 5. Org Unit
  const orgUnitSchema = new mongoose.Schema({
    name: { type: String, required: true },
    type: { type: String, required: true },
    leader_id: { type: mongoose.Schema.Types.ObjectId, ref: 'StaffProfile' }
  }, { timestamps: true, collection: 'org_units' });

  // 6. Activity
  const activitySchema = new mongoose.Schema({
    org_unit_id: { type: mongoose.Schema.Types.ObjectId, ref: 'OrgUnit' },
    field_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Field' },
    title: { type: String, required: true },
    description: String,
    location: String,
    start_time: Date,
    end_time: Date,
    start_time_updated: Date,
    end_time_updated: Date,
    capacity: Number,
    qr_code: String,
    registration_open: Date,
    registration_close: Date,
    requires_approval: { type: Boolean, default: true }
  }, { timestamps: true, collection: 'activities' });

  // 7. Activity Registration
  const registrationSchema = new mongoose.Schema({
    activity_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Activity', required: true },
    student_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    registered_at: { type: Date, default: Date.now }
  }, { timestamps: true, collection: 'activity_registrations' });

  // 8. Attendance
  const attendanceSchema = new mongoose.Schema({
    student_id: { type: mongoose.Schema.Types.ObjectId, ref: 'StudentProfile', required: true },
    activity_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Activity', required: true },
    scanned_at: { type: Date, default: Date.now },
    status: { type: String, default: 'present' },
    verified: { type: Boolean, default: false },
    verified_at: Date,
    points: Number,
    feedback: String,
    feedback_time: Date
  }, { timestamps: true, collection: 'attendances' });

  // 9. Evidence
  const evidenceSchema = new mongoose.Schema({
    student_id: { type: mongoose.Schema.Types.ObjectId, ref: 'StudentProfile', required: true },
    title: String,
    file_url: String,
    submitted_at: { type: Date, default: Date.now },
    status: { type: String, default: 'pending' },
    verified_at: Date,
    points: Number
  }, { timestamps: true, collection: 'evidences' });

  // 10. Field
  const fieldSchema = new mongoose.Schema({
    name: String
  }, { timestamps: true, collection: 'fields' });

  // 11. Class
  const classSchema = new mongoose.Schema({
    name: String,
    falcuty_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Falcuty' },
    cohort_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Cohort' }
  }, { timestamps: true, collection: 'classes' });

  // 12. Falcuty
  const falcutySchema = new mongoose.Schema({
    name: String
  }, { timestamps: true, collection: 'falcuties' });

  // 13. Cohort
  const cohortSchema = new mongoose.Schema({
    year: Number
  }, { timestamps: true, collection: 'cohorts' });

  // 14. Student Cohort
  const studentCohortSchema = new mongoose.Schema({
    student_id: { type: mongoose.Schema.Types.ObjectId, ref: 'StudentProfile', required: true },
    cohort_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Cohort', required: true },
    type: { type: String, enum: ['official', 'actual'], default: 'official' }
  }, { timestamps: true, collection: 'student_cohorts' });

  // 15. PVCD Record
  const pvcdRecordSchema = new mongoose.Schema({
    student_id: { type: mongoose.Schema.Types.ObjectId, ref: 'StudentProfile', required: true },
    year: { type: Number, required: true },
    total_point: { type: Number, default: 0 }
  }, { timestamps: true, collection: 'pvcd_records' });

  // 16. Post
  const postSchema = new mongoose.Schema({
    activity_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Activity' },
    description: String,
    created_at: { type: Date, default: Date.now }
  }, { timestamps: true, collection: 'posts' });

  // 17. Activity Eligibility
  const activityEligibilitySchema = new mongoose.Schema({
    activity_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Activity' },
    type: { type: String, enum: ['falcuty', 'cohort'] },
    reference_id: mongoose.Schema.Types.ObjectId
  }, { timestamps: true, collection: 'activity_eligibilities' });

  // Return models
  return {
    Permission: mongoose.models.Permission || mongoose.model('Permission', permissionSchema),
    UserPermission: mongoose.models.UserPermission || mongoose.model('UserPermission', userPermissionSchema),
    User: mongoose.models.User || mongoose.model('User', userSchema),
    StudentProfile: mongoose.models.StudentProfile || mongoose.model('StudentProfile', studentProfileSchema),
    StaffProfile: mongoose.models.StaffProfile || mongoose.model('StaffProfile', staffProfileSchema),
    OrgUnit: mongoose.models.OrgUnit || mongoose.model('OrgUnit', orgUnitSchema),
    Activity: mongoose.models.Activity || mongoose.model('Activity', activitySchema),
    Registration: mongoose.models.Registration || mongoose.model('Registration', registrationSchema),
    Attendance: mongoose.models.Attendance || mongoose.model('Attendance', attendanceSchema),
    Evidence: mongoose.models.Evidence || mongoose.model('Evidence', evidenceSchema),
    Field: mongoose.models.Field || mongoose.model('Field', fieldSchema),
    Class: mongoose.models.Class || mongoose.model('Class', classSchema),
    Falcuty: mongoose.models.Falcuty || mongoose.model('Falcuty', falcutySchema),
    Cohort: mongoose.models.Cohort || mongoose.model('Cohort', cohortSchema),
    StudentCohort: mongoose.models.StudentCohort || mongoose.model('StudentCohort', studentCohortSchema),
    PVCDRecord: mongoose.models.PVCDRecord || mongoose.model('PVCDRecord', pvcdRecordSchema),
    Post: mongoose.models.Post || mongoose.model('Post', postSchema),
    ActivityEligibility: mongoose.models.ActivityEligibility || mongoose.model('ActivityEligibility', activityEligibilitySchema)
  };
}

// SEED DATA
async function seedAll() {
  const models = defineSchemas();
  
  try {
    // 1. X√≥a d·ªØ li·ªáu c≈©
    console.log('üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈©...');
    await Promise.all([
      models.Permission.deleteMany({}),
      models.UserPermission.deleteMany({}),
      models.User.deleteMany({}),
      models.StudentProfile.deleteMany({}),
      models.StaffProfile.deleteMany({}),
      models.OrgUnit.deleteMany({}),
      models.Activity.deleteMany({}),
      models.Field.deleteMany({}),
      models.Class.deleteMany({}),
      models.Falcuty.deleteMany({}),
      models.Cohort.deleteMany({})
    ]);
    console.log('‚úÖ ƒê√£ x√≥a\n');

    // 2. T·∫°o Permissions (8) - D√†nh cho ƒê·∫°i h·ªçc B√°ch khoa ƒê√† N·∫µng
    console.log('üìù T·∫°o Permissions...');
    const permissions = await models.Permission.insertMany([
      {
        name_per: 'ACTIVITY_MANAGEMENT',
        description: 'Qu·∫£n l√Ω ho·∫°t ƒë·ªông ngo·∫°i kh√≥a',
        resource: 'activity',
        action: 'manage',
        details: [
          { action_name: 'T·∫°o ho·∫°t ƒë·ªông', action_code: 'CREATE', check_action: true },
          { action_name: 'Xem danh s√°ch', action_code: 'READ', check_action: true },
          { action_name: 'Ch·ªânh s·ª≠a', action_code: 'UPDATE', check_action: true },
          { action_name: 'X√≥a ho·∫°t ƒë·ªông', action_code: 'DELETE', check_action: false },
          { action_name: 'Duy·ªát ƒëƒÉng k√Ω', action_code: 'APPROVE', check_action: true }
        ]
      },
      {
        name_per: 'USER_MANAGEMENT',
        description: 'Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng',
        resource: 'user',
        action: 'manage',
        details: [
          { action_name: 'T·∫°o t√†i kho·∫£n', action_code: 'CREATE', check_action: true },
          { action_name: 'Xem th√¥ng tin', action_code: 'READ', check_action: true },
          { action_name: 'C·∫≠p nh·∫≠t th√¥ng tin', action_code: 'UPDATE', check_action: true },
          { action_name: 'X√≥a t√†i kho·∫£n', action_code: 'DELETE', check_action: false },
          { action_name: 'Kh√≥a/M·ªü kh√≥a', action_code: 'LOCK', check_action: true }
        ]
      },
      {
        name_per: 'ATTENDANCE_MANAGEMENT',
        description: 'Qu·∫£n l√Ω ƒëi·ªÉm danh v√† tham gia',
        resource: 'attendance',
        action: 'manage',
        details: [
          { action_name: 'Qu√©t m√£ QR', action_code: 'SCAN', check_action: true },
          { action_name: 'Xem danh s√°ch', action_code: 'VIEW', check_action: true },
          { action_name: 'X√°c nh·∫≠n tham gia', action_code: 'VERIFY', check_action: true },
          { action_name: 'Xu·∫•t b√°o c√°o', action_code: 'EXPORT', check_action: true }
        ]
      },
      {
        name_per: 'EVIDENCE_MANAGEMENT',
        description: 'Qu·∫£n l√Ω minh ch·ª©ng v√† t√†i li·ªáu',
        resource: 'evidence',
        action: 'manage',
        details: [
          { action_name: 'N·ªôp minh ch·ª©ng', action_code: 'SUBMIT', check_action: true },
          { action_name: 'Xem danh s√°ch', action_code: 'VIEW', check_action: true },
          { action_name: 'Duy·ªát minh ch·ª©ng', action_code: 'APPROVE', check_action: true },
          { action_name: 'T·ª´ ch·ªëi', action_code: 'REJECT', check_action: true }
        ]
      },
      {
        name_per: 'REPORT_VIEW',
        description: 'Xem b√°o c√°o v√† th·ªëng k√™',
        resource: 'report',
        action: 'view',
        details: [
          { action_name: 'B√°o c√°o t·ªïng quan', action_code: 'VIEW_OVERVIEW', check_action: true },
          { action_name: 'B√°o c√°o chi ti·∫øt', action_code: 'VIEW_DETAIL', check_action: true },
          { action_name: 'Xu·∫•t b√°o c√°o', action_code: 'EXPORT', check_action: true }
        ]
      },
      {
        name_per: 'CLASS_MANAGEMENT',
        description: 'Qu·∫£n l√Ω l·ªõp h·ªçc v√† sinh vi√™n',
        resource: 'class',
        action: 'manage',
        details: [
          { action_name: 'Xem danh s√°ch l·ªõp', action_code: 'VIEW', check_action: true },
          { action_name: 'Qu·∫£n l√Ω sinh vi√™n', action_code: 'MANAGE_STUDENTS', check_action: true },
          { action_name: 'ƒêi·ªÉm danh l·ªõp', action_code: 'ATTENDANCE', check_action: true },
          { action_name: 'B√°o c√°o l·ªõp', action_code: 'REPORT', check_action: true }
        ]
      },
      {
        name_per: 'POINT_MANAGEMENT',
        description: 'Qu·∫£n l√Ω ƒëi·ªÉm r√®n luy·ªán',
        resource: 'point',
        action: 'manage',
        details: [
          { action_name: 'C·∫•p ƒëi·ªÉm', action_code: 'AWARD', check_action: true },
          { action_name: 'Xem ƒëi·ªÉm', action_code: 'VIEW', check_action: true },
          { action_name: 'ƒêi·ªÅu ch·ªânh ƒëi·ªÉm', action_code: 'ADJUST', check_action: true },
          { action_name: 'Xu·∫•t b·∫£ng ƒëi·ªÉm', action_code: 'EXPORT', check_action: true }
        ]
      },
      {
        name_per: 'NOTIFICATION_MANAGEMENT',
        description: 'Qu·∫£n l√Ω th√¥ng b√°o',
        resource: 'notification',
        action: 'manage',
        details: [
          { action_name: 'T·∫°o th√¥ng b√°o', action_code: 'CREATE', check_action: true },
          { action_name: 'G·ª≠i th√¥ng b√°o', action_code: 'SEND', check_action: true },
          { action_name: 'Xem l·ªãch s·ª≠', action_code: 'VIEW', check_action: true },
          { action_name: 'X√≥a th√¥ng b√°o', action_code: 'DELETE', check_action: true }
        ]
      }
    ]);
    console.log(`‚úÖ ${permissions.length} permissions\n`);

    // 3. T·∫°o Fields (8) - Lƒ©nh v·ª±c ho·∫°t ƒë·ªông t·∫°i ƒê·∫°i h·ªçc B√°ch khoa ƒê√† N·∫µng
    console.log('üìù T·∫°o Fields...');
    const fields = await models.Field.insertMany([
      { name: 'VƒÉn h√≥a - Ngh·ªá thu·∫≠t' },
      { name: 'Th·ªÉ thao - S·ª©c kh·ªèe' },
      { name: 'H·ªçc thu·∫≠t - Nghi√™n c·ª©u' },
      { name: 'T√¨nh nguy·ªán - X√£ h·ªôi' },
      { name: 'C√¥ng ngh·ªá - S√°ng t·∫°o' },
      { name: 'Kh·ªüi nghi·ªáp - Kinh doanh' },
      { name: 'An to√†n - B·∫£o v·ªá m√¥i tr∆∞·ªùng' },
      { name: 'Giao l∆∞u - H·ªôi nh·∫≠p' }
    ]);
    console.log(`‚úÖ ${fields.length} fields\n`);

    // 4. T·∫°o Falcuties (4) - C√°c khoa t·∫°i ƒê·∫°i h·ªçc B√°ch khoa ƒê√† N·∫µng
    console.log('üìù T·∫°o Falcuties...');
    const falcuties = await models.Falcuty.insertMany([
      { name: 'Khoa C√¥ng ngh·ªá th√¥ng tin' },
      { name: 'Khoa C∆° kh√≠' },
      { name: 'Khoa Qu·∫£n l√Ω d·ª± √°n' },
      { name: 'Khoa H√≥a' }
    ]);
    console.log(`‚úÖ ${falcuties.length} falcuties\n`);

    // 5. T·∫°o Cohorts (5) - C√°c kh√≥a t·∫°i ƒê·∫°i h·ªçc B√°ch khoa ƒê√† N·∫µng
    console.log('üìù T·∫°o Cohorts...');
    const cohorts = await models.Cohort.insertMany([
      { year: 21 }, // Kh√≥a 21
      { year: 22 }, // Kh√≥a 22
      { year: 23 }, // Kh√≥a 23
      { year: 24 }, // Kh√≥a 24
      { year: 25 }  // Kh√≥a 25 (nƒÉm hi·ªán t·∫°i)
    ]);
    console.log(`‚úÖ ${cohorts.length} cohorts\n`);

    // 6. T·∫°o Classes (8) - C√°c l·ªõp t·∫°i Khoa C√¥ng ngh·ªá th√¥ng tin
    console.log('üìù T·∫°o Classes...');
    const classes = await models.Class.insertMany([
      // Kh√≥a 21
      { name: '21TCLC_DT1', falcuty_id: falcuties[0]._id, cohort_id: cohorts[0]._id },
      { name: '21TCLC_DT2', falcuty_id: falcuties[0]._id, cohort_id: cohorts[0]._id },
      { name: '21TCLC_ATTT', falcuty_id: falcuties[0]._id, cohort_id: cohorts[0]._id },
      // Kh√≥a 22
      { name: '22TCLC_DT1', falcuty_id: falcuties[0]._id, cohort_id: cohorts[1]._id },
      { name: '22TCLC_DT2', falcuty_id: falcuties[0]._id, cohort_id: cohorts[1]._id },
      // Kh√≥a 23
      { name: '23TCLC_DT1', falcuty_id: falcuties[0]._id, cohort_id: cohorts[2]._id },
      { name: '23TCLC_DT2', falcuty_id: falcuties[0]._id, cohort_id: cohorts[2]._id },
      // Kh√≥a 24
      { name: '24TCLC_DT1', falcuty_id: falcuties[0]._id, cohort_id: cohorts[3]._id }
    ]);
    console.log(`‚úÖ ${classes.length} classes\n`);

    // 7. T·∫°o Org Units (6) - C√°c ƒë∆°n v·ªã t·ªï ch·ª©c t·∫°i ƒê·∫°i h·ªçc B√°ch khoa ƒê√† N·∫µng
    console.log('üìù T·∫°o Org Units...');
    const orgUnits = await models.OrgUnit.insertMany([
      { name: 'Ph√≤ng C√¥ng t√°c sinh vi√™n', type: 'department' },
      { name: 'ƒêo√†n tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch khoa', type: 'union' },
      { name: 'H·ªôi sinh vi√™n ƒê·∫°i h·ªçc B√°ch khoa', type: 'union' },
      { name: 'Khoa C√¥ng ngh·ªá th√¥ng tin', type: 'faculty' },
      { name: 'CLB L·∫≠p tr√¨nh vi√™n', type: 'club' },
      { name: 'CLB An to√†n th√¥ng tin', type: 'club' }
    ]);
    console.log(`‚úÖ ${orgUnits.length} org units\n`);

    // 8. T·∫°o Users (10) - T√†i kho·∫£n t·∫°i ƒê·∫°i h·ªçc B√°ch khoa ƒê√† N·∫µng
    console.log('üìù T·∫°o Users...');
    const users = await models.User.insertMany([
      {
        username: 'admin',
        password: await bcrypt.hash('admin123', 10),
        name: 'Qu·∫£n tr·ªã h·ªá th·ªëng',
        email: 'admin@dut.edu.vn',
        role: 'admin',
        active: true
      },
      {
        username: 'ctsv001',
        password: await bcrypt.hash('ctsv123', 10),
        name: 'ThS. Nguy·ªÖn Th·ªã Minh',
        email: 'minh.nt@dut.edu.vn',
        role: 'ctsv',
        active: true
      },
      {
        username: 'doantruong001',
        password: await bcrypt.hash('doantruong123', 10),
        name: 'ThS. Tr·∫ßn VƒÉn H√πng',
        email: 'hung.tv@dut.edu.vn',
        role: 'doantruong',
        active: true
      },
      {
        username: 'hoisv001',
        password: await bcrypt.hash('hoisv123', 10),
        name: 'L√™ Th·ªã Lan',
        email: 'lan.lt@dut.edu.vn',
        role: 'hoisv',
        active: true
      },
      {
        username: 'khoa001',
        password: await bcrypt.hash('khoa123', 10),
        name: 'PGS.TS. Ph·∫°m VƒÉn ƒê·ª©c',
        email: 'duc.pv@dut.edu.vn',
        role: 'khoa',
        active: true
      },
      {
        username: 'clb001',
        password: await bcrypt.hash('clb123', 10),
        name: 'Nguy·ªÖn VƒÉn Nam',
        email: 'nam.nv@dut.edu.vn',
        role: 'clb',
        active: true
      },
      {
        username: '2151012345',
        password: await bcrypt.hash('student123', 10),
        name: 'Nguy·ªÖn VƒÉn An',
        email: 'an.nv21@student.dut.edu.vn',
        role: 'student',
        active: true
      },
      {
        username: '2151012346',
        password: await bcrypt.hash('student123', 10),
        name: 'Tr·∫ßn Th·ªã B√¨nh',
        email: 'binh.tt21@student.dut.edu.vn',
        role: 'student',
        active: true
      },
      {
        username: '2251012347',
        password: await bcrypt.hash('student123', 10),
        name: 'L√™ VƒÉn C∆∞·ªùng',
        email: 'cuong.lv22@student.dut.edu.vn',
        role: 'loptruong',
        active: true
      },
      {
        username: '2351012348',
        password: await bcrypt.hash('student123', 10),
        name: 'Ph·∫°m Th·ªã Dung',
        email: 'dung.pt23@student.dut.edu.vn',
        role: 'student',
        active: true
      }
    ]);
    console.log(`‚úÖ ${users.length} users\n`);

    // 9. T·∫°o Student Profiles (4) - Sinh vi√™n Khoa C√¥ng ngh·ªá th√¥ng tin
    console.log('üìù T·∫°o Student Profiles...');
    const studentProfiles = await models.StudentProfile.insertMany([
      {
        user_id: users[6]._id,
        student_number: '2151012345',
        full_name: 'Nguy·ªÖn VƒÉn An',
        date_of_birth: new Date('2003-05-15'),
        gender: 'Nam',
        email: 'an.nv21@student.dut.edu.vn',
        phone: '0901234567',
        class_id: classes[0]._id,
        enrollment_year: 2021,
        contact_address: '123 ƒê∆∞·ªùng 2/9, H·∫£i Ch√¢u, ƒê√† N·∫µng',
        isClassMonitor: false
      },
      {
        user_id: users[7]._id,
        student_number: '2151012346',
        full_name: 'Tr·∫ßn Th·ªã B√¨nh',
        date_of_birth: new Date('2003-08-20'),
        gender: 'N·ªØ',
        email: 'binh.tt21@student.dut.edu.vn',
        phone: '0901234568',
        class_id: classes[0]._id,
        enrollment_year: 2021,
        contact_address: '456 ƒê∆∞·ªùng L√™ Du·∫©n, Thanh Kh√™, ƒê√† N·∫µng',
        isClassMonitor: false
      },
      {
        user_id: users[8]._id,
        student_number: '2251012347',
        full_name: 'L√™ VƒÉn C∆∞·ªùng',
        date_of_birth: new Date('2004-03-10'),
        gender: 'Nam',
        email: 'cuong.lv22@student.dut.edu.vn',
        phone: '0901234569',
        class_id: classes[3]._id,
        enrollment_year: 2022,
        contact_address: '789 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn Linh, Li√™n Chi·ªÉu, ƒê√† N·∫µng',
        isClassMonitor: true
      },
      {
        user_id: users[9]._id,
        student_number: '2351012348',
        full_name: 'Ph·∫°m Th·ªã Dung',
        date_of_birth: new Date('2005-11-25'),
        gender: 'N·ªØ',
        email: 'dung.pt23@student.dut.edu.vn',
        phone: '0901234570',
        class_id: classes[5]._id,
        enrollment_year: 2023,
        contact_address: '321 ƒê∆∞·ªùng Tr·∫ßn Ph√∫, H·∫£i Ch√¢u, ƒê√† N·∫µng',
        isClassMonitor: false
      }
    ]);
    console.log(`‚úÖ ${studentProfiles.length} student profiles\n`);

    // 10. T·∫°o Staff Profiles (5) - C√°n b·ªô t·∫°i ƒê·∫°i h·ªçc B√°ch khoa ƒê√† N·∫µng
    console.log('üìù T·∫°o Staff Profiles...');
    const staffProfiles = await models.StaffProfile.insertMany([
      {
        user_id: users[1]._id,
        staff_number: 'CTSV001',
        full_name: 'ThS. Nguy·ªÖn Th·ªã Minh',
        date_of_birth: new Date('1985-07-15'),
        gender: 'N·ªØ',
        email: 'minh.nt@dut.edu.vn',
        phone: '0901234501',
        org_unit_id: orgUnits[0]._id,
        contact_address: 'S·ªë 1 ƒê∆∞·ªùng Ph·∫°m VƒÉn ƒê·ªìng, H·∫£i Ch√¢u, ƒê√† N·∫µng'
      },
      {
        user_id: users[2]._id,
        staff_number: 'DT001',
        full_name: 'ThS. Tr·∫ßn VƒÉn H√πng',
        date_of_birth: new Date('1988-03-20'),
        gender: 'Nam',
        email: 'hung.tv@dut.edu.vn',
        phone: '0901234502',
        org_unit_id: orgUnits[1]._id,
        contact_address: 'S·ªë 2 ƒê∆∞·ªùng L√™ Du·∫©n, Thanh Kh√™, ƒê√† N·∫µng'
      },
      {
        user_id: users[3]._id,
        staff_number: 'HSV001',
        full_name: 'L√™ Th·ªã Lan',
        date_of_birth: new Date('1990-09-10'),
        gender: 'N·ªØ',
        email: 'lan.lt@dut.edu.vn',
        phone: '0901234503',
        org_unit_id: orgUnits[2]._id,
        contact_address: 'S·ªë 3 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn Linh, Li√™n Chi·ªÉu, ƒê√† N·∫µng'
      },
      {
        user_id: users[4]._id,
        staff_number: 'KH001',
        full_name: 'PGS.TS. Ph·∫°m VƒÉn ƒê·ª©c',
        date_of_birth: new Date('1975-12-05'),
        gender: 'Nam',
        email: 'duc.pv@dut.edu.vn',
        phone: '0901234504',
        org_unit_id: orgUnits[3]._id,
        contact_address: 'S·ªë 4 ƒê∆∞·ªùng Tr·∫ßn Ph√∫, H·∫£i Ch√¢u, ƒê√† N·∫µng'
      },
      {
        user_id: users[5]._id,
        staff_number: 'CLB001',
        full_name: 'Nguy·ªÖn VƒÉn Nam',
        date_of_birth: new Date('1992-04-18'),
        gender: 'Nam',
        email: 'nam.nv@dut.edu.vn',
        phone: '0901234505',
        org_unit_id: orgUnits[4]._id,
        contact_address: 'S·ªë 5 ƒê∆∞·ªùng 2/9, H·∫£i Ch√¢u, ƒê√† N·∫µng'
      }
    ]);
    console.log(`‚úÖ ${staffProfiles.length} staff profiles\n`);

    // 11. T·∫°o Activities (8) - Ho·∫°t ƒë·ªông t·∫°i ƒê·∫°i h·ªçc B√°ch khoa ƒê√† N·∫µng
    console.log('üìù T·∫°o Activities...');
    const activities = await models.Activity.insertMany([
      {
        title: 'H·ªôi thi L·∫≠p tr√¨nh vi√™n tr·∫ª 2025',
        description: 'Cu·ªôc thi l·∫≠p tr√¨nh d√†nh cho sinh vi√™n Khoa C√¥ng ngh·ªá th√¥ng tin',
        location: 'Ph√≤ng m√°y t√≠nh A1 - Khoa CNTT',
        start_time: new Date('2025-03-15T08:00:00'),
        end_time: new Date('2025-03-15T17:00:00'),
        registration_open: new Date('2025-02-15T00:00:00'),
        registration_close: new Date('2025-03-10T23:59:59'),
        org_unit_id: orgUnits[4]._id,
        field_id: fields[4]._id,
        capacity: 80,
        requires_approval: true
      },
      {
        title: 'Ng√†y h·ªôi T√¨nh nguy·ªán H√® 2025',
        description: 'Ho·∫°t ƒë·ªông t√¨nh nguy·ªán t·∫°i c√°c v√πng qu√™ mi·ªÅn Trung',
        location: 'H·ªôi tr∆∞·ªùng l·ªõn - Tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch khoa',
        start_time: new Date('2025-06-20T07:00:00'),
        end_time: new Date('2025-06-22T18:00:00'),
        registration_open: new Date('2025-05-01T00:00:00'),
        registration_close: new Date('2025-06-10T23:59:59'),
        org_unit_id: orgUnits[2]._id,
        field_id: fields[3]._id,
        capacity: 150,
        requires_approval: true
      },
      {
        title: 'Gi·∫£i b√≥ng ƒë√° sinh vi√™n B√°ch khoa 2025',
        description: 'Gi·∫£i b√≥ng ƒë√° nam n·ªØ sinh vi√™n to√†n tr∆∞·ªùng',
        location: 'S√¢n v·∫≠n ƒë·ªông ƒê·∫°i h·ªçc B√°ch khoa',
        start_time: new Date('2025-04-01T14:00:00'),
        end_time: new Date('2025-04-15T18:00:00'),
        registration_open: new Date('2025-03-01T00:00:00'),
        registration_close: new Date('2025-03-25T23:59:59'),
        org_unit_id: orgUnits[2]._id,
        field_id: fields[1]._id,
        capacity: 200,
        requires_approval: false
      },
      {
        title: 'H·ªôi th·∫£o Nghi√™n c·ª©u khoa h·ªçc sinh vi√™n',
        description: 'Tr√¨nh b√†y c√°c ƒë·ªÅ t√†i nghi√™n c·ª©u khoa h·ªçc c·ªßa sinh vi√™n',
        location: 'Ph√≤ng h·ªôi th·∫£o Khoa CNTT',
        start_time: new Date('2025-05-20T08:30:00'),
        end_time: new Date('2025-05-20T16:30:00'),
        registration_open: new Date('2025-04-01T00:00:00'),
        registration_close: new Date('2025-05-10T23:59:59'),
        org_unit_id: orgUnits[3]._id,
        field_id: fields[2]._id,
        capacity: 60,
        requires_approval: true
      },
      {
        title: 'Workshop An to√†n th√¥ng tin',
        description: 'Chia s·∫ª ki·∫øn th·ª©c v·ªÅ b·∫£o m·∫≠t v√† an to√†n th√¥ng tin',
        location: 'Ph√≤ng th·ª±c h√†nh An to√†n th√¥ng tin',
        start_time: new Date('2025-02-28T14:00:00'),
        end_time: new Date('2025-02-28T17:00:00'),
        registration_open: new Date('2025-02-01T00:00:00'),
        registration_close: new Date('2025-02-25T23:59:59'),
        org_unit_id: orgUnits[5]._id,
        field_id: fields[4]._id,
        capacity: 40,
        requires_approval: false
      },
      {
        title: 'Festival VƒÉn h√≥a - Ngh·ªá thu·∫≠t 2025',
        description: 'Bi·ªÉu di·ªÖn vƒÉn ngh·ªá, tri·ªÉn l√£m ngh·ªá thu·∫≠t sinh vi√™n',
        location: 'S√¢n kh·∫•u ngo√†i tr·ªùi - Khu√¥n vi√™n tr∆∞·ªùng',
        start_time: new Date('2025-03-26T18:00:00'),
        end_time: new Date('2025-03-26T22:00:00'),
        registration_open: new Date('2025-02-15T00:00:00'),
        registration_close: new Date('2025-03-20T23:59:59'),
        org_unit_id: orgUnits[2]._id,
        field_id: fields[0]._id,
        capacity: 300,
        requires_approval: false
      },
      {
        title: 'Ch∆∞∆°ng tr√¨nh Kh·ªüi nghi·ªáp ƒê·ªïi m·ªõi s√°ng t·∫°o',
        description: 'Pitching √Ω t∆∞·ªüng kh·ªüi nghi·ªáp c√¥ng ngh·ªá',
        location: 'H·ªôi tr∆∞·ªùng Khoa CNTT',
        start_time: new Date('2025-04-15T08:00:00'),
        end_time: new Date('2025-04-15T17:00:00'),
        registration_open: new Date('2025-03-01T00:00:00'),
        registration_close: new Date('2025-04-05T23:59:59'),
        org_unit_id: orgUnits[3]._id,
        field_id: fields[5]._id,
        capacity: 50,
        requires_approval: true
      },
      {
        title: 'Chi·∫øn d·ªãch B·∫£o v·ªá m√¥i tr∆∞·ªùng xanh',
        description: 'Ho·∫°t ƒë·ªông d·ªçn d·∫πp, tr·ªìng c√¢y, b·∫£o v·ªá m√¥i tr∆∞·ªùng',
        location: 'C√¥ng vi√™n 29/3, ƒê√† N·∫µng',
        start_time: new Date('2025-04-22T07:00:00'),
        end_time: new Date('2025-04-22T11:00:00'),
        registration_open: new Date('2025-04-01T00:00:00'),
        registration_close: new Date('2025-04-18T23:59:59'),
        org_unit_id: orgUnits[1]._id,
        field_id: fields[6]._id,
        capacity: 100,
        requires_approval: false
      }
    ]);
    console.log(`‚úÖ ${activities.length} activities\n`);

    // 12. G√°n Permissions cho Users - Ph√¢n quy·ªÅn theo vai tr√≤ th·ª±c t·∫ø
    console.log('üìù G√°n Permissions...');
    const userPermissions = [];
    
    // Admin c√≥ t·∫•t c·∫£ permissions
    for (const perm of permissions) {
      userPermissions.push({
        id_user: users[0]._id,
        id_per: perm._id,
        licensed: true,
        granted_by: users[0]._id
      });
    }
    
    // CTSV (users[1]) - C√¥ng t√°c sinh vi√™n
    userPermissions.push(
      { id_user: users[1]._id, id_per: permissions[0]._id, licensed: true, granted_by: users[0]._id }, // ACTIVITY_MANAGEMENT
      { id_user: users[1]._id, id_per: permissions[1]._id, licensed: true, granted_by: users[0]._id }, // USER_MANAGEMENT
      { id_user: users[1]._id, id_per: permissions[2]._id, licensed: true, granted_by: users[0]._id }, // ATTENDANCE_MANAGEMENT
      { id_user: users[1]._id, id_per: permissions[4]._id, licensed: true, granted_by: users[0]._id }, // REPORT_VIEW
      { id_user: users[1]._id, id_per: permissions[5]._id, licensed: true, granted_by: users[0]._id }, // CLASS_MANAGEMENT
      { id_user: users[1]._id, id_per: permissions[6]._id, licensed: true, granted_by: users[0]._id }  // POINT_MANAGEMENT
    );
    
    // ƒêo√†n tr∆∞·ªùng (users[2])
    userPermissions.push(
      { id_user: users[2]._id, id_per: permissions[0]._id, licensed: true, granted_by: users[0]._id }, // ACTIVITY_MANAGEMENT
      { id_user: users[2]._id, id_per: permissions[2]._id, licensed: true, granted_by: users[0]._id }, // ATTENDANCE_MANAGEMENT
      { id_user: users[2]._id, id_per: permissions[4]._id, licensed: true, granted_by: users[0]._id }, // REPORT_VIEW
      { id_user: users[2]._id, id_per: permissions[7]._id, licensed: true, granted_by: users[0]._id }  // NOTIFICATION_MANAGEMENT
    );
    
    // H·ªôi sinh vi√™n (users[3])
    userPermissions.push(
      { id_user: users[3]._id, id_per: permissions[0]._id, licensed: true, granted_by: users[0]._id }, // ACTIVITY_MANAGEMENT
      { id_user: users[3]._id, id_per: permissions[2]._id, licensed: true, granted_by: users[0]._id }, // ATTENDANCE_MANAGEMENT
      { id_user: users[3]._id, id_per: permissions[7]._id, licensed: true, granted_by: users[0]._id }  // NOTIFICATION_MANAGEMENT
    );
    
    // Khoa (users[4])
    userPermissions.push(
      { id_user: users[4]._id, id_per: permissions[0]._id, licensed: true, granted_by: users[0]._id }, // ACTIVITY_MANAGEMENT
      { id_user: users[4]._id, id_per: permissions[2]._id, licensed: true, granted_by: users[0]._id }, // ATTENDANCE_MANAGEMENT
      { id_user: users[4]._id, id_per: permissions[4]._id, licensed: true, granted_by: users[0]._id }, // REPORT_VIEW
      { id_user: users[4]._id, id_per: permissions[5]._id, licensed: true, granted_by: users[0]._id }  // CLASS_MANAGEMENT
    );
    
    // CLB (users[5])
    userPermissions.push(
      { id_user: users[5]._id, id_per: permissions[0]._id, licensed: true, granted_by: users[0]._id }, // ACTIVITY_MANAGEMENT
      { id_user: users[5]._id, id_per: permissions[2]._id, licensed: true, granted_by: users[0]._id }  // ATTENDANCE_MANAGEMENT
    );
    
    // Sinh vi√™n (users[6], users[7], users[9])
    for (const studentId of [users[6]._id, users[7]._id, users[9]._id]) {
      userPermissions.push(
        { id_user: studentId, id_per: permissions[3]._id, licensed: true, granted_by: users[0]._id }, // EVIDENCE_MANAGEMENT
        { id_user: studentId, id_per: permissions[4]._id, licensed: true, granted_by: users[0]._id }  // REPORT_VIEW
      );
    }
    
    // L·ªõp tr∆∞·ªüng (users[8]) - C√≥ th√™m quy·ªÅn qu·∫£n l√Ω l·ªõp
    userPermissions.push(
      { id_user: users[8]._id, id_per: permissions[3]._id, licensed: true, granted_by: users[0]._id }, // EVIDENCE_MANAGEMENT
      { id_user: users[8]._id, id_per: permissions[4]._id, licensed: true, granted_by: users[0]._id }, // REPORT_VIEW
      { id_user: users[8]._id, id_per: permissions[5]._id, licensed: true, granted_by: users[0]._id }  // CLASS_MANAGEMENT
    );
    
    await models.UserPermission.insertMany(userPermissions);
    console.log(`‚úÖ ${userPermissions.length} user permissions\n`);

    // Summary
    console.log('='.repeat(70));
    console.log('üìä TH·ªêNG K√ä - ƒê·∫†I H·ªåC B√ÅCH KHOA ƒê√Ä N·∫¥NG');
    console.log('='.repeat(70));
    console.log(`‚úÖ Permissions: ${permissions.length} (8 lo·∫°i quy·ªÅn)`);
    console.log(`‚úÖ Users: ${users.length} (10 t√†i kho·∫£n)`);
    console.log(`‚úÖ Student Profiles: ${studentProfiles.length} (4 sinh vi√™n)`);
    console.log(`‚úÖ Staff Profiles: ${staffProfiles.length} (5 c√°n b·ªô)`);
    console.log(`‚úÖ Org Units: ${orgUnits.length} (6 ƒë∆°n v·ªã t·ªï ch·ª©c)`);
    console.log(`‚úÖ Fields: ${fields.length} (8 lƒ©nh v·ª±c ho·∫°t ƒë·ªông)`);
    console.log(`‚úÖ Falcuties: ${falcuties.length} (4 khoa)`);
    console.log(`‚úÖ Cohorts: ${cohorts.length} (5 kh√≥a h·ªçc)`);
    console.log(`‚úÖ Classes: ${classes.length} (8 l·ªõp h·ªçc)`);
    console.log(`‚úÖ Activities: ${activities.length} (8 ho·∫°t ƒë·ªông)`);
    console.log(`‚úÖ User Permissions: ${userPermissions.length} (ph√¢n quy·ªÅn)`);
    console.log('='.repeat(70));
    
    console.log('\nüéâ SEED HO√ÄN T·∫§T!\n');
    
    console.log('üí° T√ÄI KHO·∫¢N TEST - ƒê·∫†I H·ªåC B√ÅCH KHOA ƒê√Ä N·∫¥NG:');
    console.log('   üîë admin / admin123 (Qu·∫£n tr·ªã h·ªá th·ªëng - t·∫•t c·∫£ quy·ªÅn)');
    console.log('   üë©‚Äçüíº ctsv001 / ctsv123 (ThS. Nguy·ªÖn Th·ªã Minh - CTSV)');
    console.log('   üë®‚Äçüè´ doantruong001 / doantruong123 (ThS. Tr·∫ßn VƒÉn H√πng - ƒêo√†n tr∆∞·ªùng)');
    console.log('   üë©‚Äçüéì hoisv001 / hoisv123 (L√™ Th·ªã Lan - H·ªôi sinh vi√™n)');
    console.log('   üë®‚Äçüéì khoa001 / khoa123 (PGS.TS. Ph·∫°m VƒÉn ƒê·ª©c - Khoa CNTT)');
    console.log('   üë®‚Äçüíª clb001 / clb123 (Nguy·ªÖn VƒÉn Nam - CLB L·∫≠p tr√¨nh)');
    console.log('   üë®‚Äçüéì 2151012345 / student123 (Nguy·ªÖn VƒÉn An - Sinh vi√™n)');
    console.log('   üë©‚Äçüéì 2151012346 / student123 (Tr·∫ßn Th·ªã B√¨nh - Sinh vi√™n)');
    console.log('   üë®‚Äçüéì 2251012347 / student123 (L√™ VƒÉn C∆∞·ªùng - L·ªõp tr∆∞·ªüng)');
    console.log('   üë©‚Äçüéì 2351012348 / student123 (Ph·∫°m Th·ªã Dung - Sinh vi√™n)\n');

  } catch (error) {
    console.error('\n‚ùå L·ªñI:', error);
    throw error;
  }
}

// Main
async function main() {
  try {
    await connectDB();
    await seedAll();
  } catch (error) {
    console.error('Error:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üëã ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB\n');
  }
}

main();



/**
 * SEED PERMISSIONS - T·∫°o Permissions, Actions, Role Actions
 * D·ª±a tr√™n file permissions.config.js v√† 4 roles c√≥ s·∫µn
 */

require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

console.log('\n' + '='.repeat(70));
console.log('üîê SEED PERMISSIONS & ACTIONS');
console.log('='.repeat(70) + '\n');

async function connectDB() {
  const mongoUri = process.env.MONGODB_URI;
  const dbName = 'Community_Activity_Management';
  
  await mongoose.connect(mongoUri, { dbName });
  console.log(`‚úÖ K·∫øt n·ªëi: ${dbName}\n`);
}

// ƒê·ªãnh nghƒ©a t·∫•t c·∫£ resources v√† actions
const RESOURCES_ACTIONS = {
  activity: {
    name: 'Qu·∫£n l√Ω ho·∫°t ƒë·ªông',
    description: 'Qu·∫£n l√Ω c√°c ho·∫°t ƒë·ªông c·ªông ƒë·ªìng',
    actions: [
      { code: 'CREATE', name: 'T·∫°o ho·∫°t ƒë·ªông', description: 'T·∫°o ho·∫°t ƒë·ªông m·ªõi' },
      { code: 'READ', name: 'Xem ho·∫°t ƒë·ªông', description: 'Xem danh s√°ch v√† chi ti·∫øt ho·∫°t ƒë·ªông' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông', description: 'Ch·ªânh s·ª≠a th√¥ng tin ho·∫°t ƒë·ªông' },
      { code: 'DELETE', name: 'X√≥a ho·∫°t ƒë·ªông', description: 'X√≥a ho·∫°t ƒë·ªông' },
      { code: 'APPROVE', name: 'Duy·ªát ho·∫°t ƒë·ªông', description: 'Duy·ªát ho·∫°t ƒë·ªông ƒë√£ t·∫°o' },
      { code: 'REJECT', name: 'T·ª´ ch·ªëi ho·∫°t ƒë·ªông', description: 'T·ª´ ch·ªëi ho·∫°t ƒë·ªông' },
      { code: 'COMPLETE', name: 'Ho√†n th√†nh ho·∫°t ƒë·ªông', description: 'ƒê√°nh d·∫•u ho·∫°t ƒë·ªông ho√†n th√†nh' },
      { code: 'EXPORT', name: 'Xu·∫•t danh s√°ch', description: 'Xu·∫•t danh s√°ch ho·∫°t ƒë·ªông' }
    ]
  },
  user: {
    name: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng',
    description: 'Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng',
    actions: [
      { code: 'CREATE', name: 'T·∫°o ng∆∞·ªùi d√πng', description: 'T·∫°o t√†i kho·∫£n m·ªõi' },
      { code: 'READ', name: 'Xem ng∆∞·ªùi d√πng', description: 'Xem th√¥ng tin ng∆∞·ªùi d√πng' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng', description: 'Ch·ªânh s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng' },
      { code: 'DELETE', name: 'X√≥a ng∆∞·ªùi d√πng', description: 'X√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng' },
      { code: 'LOCK', name: 'Kh√≥a t√†i kho·∫£n', description: 'Kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng' },
      { code: 'UNLOCK', name: 'M·ªü kh√≥a t√†i kho·∫£n', description: 'M·ªü kh√≥a t√†i kho·∫£n' }
    ]
  },
  attendance: {
    name: 'Qu·∫£n l√Ω ƒëi·ªÉm danh',
    description: 'Qu·∫£n l√Ω ƒëi·ªÉm danh ho·∫°t ƒë·ªông',
    actions: [
      { code: 'SCAN', name: 'Qu√©t QR ƒëi·ªÉm danh', description: 'Qu√©t m√£ QR ƒë·ªÉ ƒëi·ªÉm danh' },
      { code: 'READ', name: 'Xem ƒëi·ªÉm danh', description: 'Xem danh s√°ch ƒëi·ªÉm danh' },
      { code: 'VERIFY', name: 'X√°c nh·∫≠n ƒëi·ªÉm danh', description: 'X√°c nh·∫≠n ƒëi·ªÉm danh h·ª£p l·ªá' },
      { code: 'EXPORT', name: 'Xu·∫•t ƒëi·ªÉm danh', description: 'Xu·∫•t danh s√°ch ƒëi·ªÉm danh' }
    ]
  },
  evidence: {
    name: 'Qu·∫£n l√Ω minh ch·ª©ng',
    description: 'Qu·∫£n l√Ω minh ch·ª©ng ho·∫°t ƒë·ªông',
    actions: [
      { code: 'SUBMIT', name: 'N·ªôp minh ch·ª©ng', description: 'N·ªôp minh ch·ª©ng ho·∫°t ƒë·ªông' },
      { code: 'READ', name: 'Xem minh ch·ª©ng', description: 'Xem danh s√°ch minh ch·ª©ng' },
      { code: 'APPROVE', name: 'Duy·ªát minh ch·ª©ng', description: 'Duy·ªát minh ch·ª©ng h·ª£p l·ªá' },
      { code: 'REJECT', name: 'T·ª´ ch·ªëi minh ch·ª©ng', description: 'T·ª´ ch·ªëi minh ch·ª©ng' },
      { code: 'DELETE', name: 'X√≥a minh ch·ª©ng', description: 'X√≥a minh ch·ª©ng' }
    ]
  },
  report: {
    name: 'B√°o c√°o th·ªëng k√™',
    description: 'Xem v√† xu·∫•t b√°o c√°o',
    actions: [
      { code: 'VIEW_OVERVIEW', name: 'Xem t·ªïng quan', description: 'Xem b√°o c√°o t·ªïng quan' },
      { code: 'VIEW_DETAIL', name: 'Xem chi ti·∫øt', description: 'Xem b√°o c√°o chi ti·∫øt' },
      { code: 'EXPORT', name: 'Xu·∫•t b√°o c√°o', description: 'Xu·∫•t b√°o c√°o ra file' }
    ]
  },
  class: {
    name: 'Qu·∫£n l√Ω l·ªõp h·ªçc',
    description: 'Qu·∫£n l√Ω th√¥ng tin l·ªõp h·ªçc',
    actions: [
      { code: 'CREATE', name: 'T·∫°o l·ªõp', description: 'T·∫°o l·ªõp h·ªçc m·ªõi' },
      { code: 'READ', name: 'Xem l·ªõp', description: 'Xem th√¥ng tin l·ªõp h·ªçc' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t l·ªõp', description: 'Ch·ªânh s·ª≠a th√¥ng tin l·ªõp' },
      { code: 'DELETE', name: 'X√≥a l·ªõp', description: 'X√≥a l·ªõp h·ªçc' },
      { code: 'MANAGE_STUDENTS', name: 'Qu·∫£n l√Ω sinh vi√™n', description: 'Qu·∫£n l√Ω sinh vi√™n trong l·ªõp' },
      { code: 'ATTENDANCE', name: 'ƒêi·ªÉm danh l·ªõp', description: 'ƒêi·ªÉm danh l·ªõp h·ªçc' },
      { code: 'REPORT', name: 'B√°o c√°o l·ªõp', description: 'Xem b√°o c√°o l·ªõp h·ªçc' }
    ]
  },
  pvcd_record: {
    name: 'Qu·∫£n l√Ω ƒëi·ªÉm PVCD',
    description: 'Qu·∫£n l√Ω ƒëi·ªÉm r√®n luy·ªán sinh vi√™n',
    actions: [
      { code: 'CREATE', name: 'T·∫°o b·∫£n ghi', description: 'T·∫°o b·∫£n ghi ƒëi·ªÉm PVCD' },
      { code: 'READ', name: 'Xem ƒëi·ªÉm', description: 'Xem ƒëi·ªÉm PVCD' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t ƒëi·ªÉm', description: 'C·∫≠p nh·∫≠t ƒëi·ªÉm PVCD' },
      { code: 'DELETE', name: 'X√≥a b·∫£n ghi', description: 'X√≥a b·∫£n ghi ƒëi·ªÉm PVCD' },
      { code: 'ADJUST', name: 'ƒêi·ªÅu ch·ªânh ƒëi·ªÉm', description: 'ƒêi·ªÅu ch·ªânh ƒëi·ªÉm PVCD' }
    ]
  },
  role: {
    name: 'Qu·∫£n l√Ω vai tr√≤',
    description: 'Qu·∫£n l√Ω vai tr√≤ ng∆∞·ªùi d√πng',
    actions: [
      { code: 'CREATE', name: 'T·∫°o vai tr√≤', description: 'T·∫°o vai tr√≤ m·ªõi' },
      { code: 'READ', name: 'Xem vai tr√≤', description: 'Xem danh s√°ch vai tr√≤' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t vai tr√≤', description: 'Ch·ªânh s·ª≠a vai tr√≤' },
      { code: 'DELETE', name: 'X√≥a vai tr√≤', description: 'X√≥a vai tr√≤' }
    ]
  },
  permission: {
    name: 'Qu·∫£n l√Ω quy·ªÅn',
    description: 'Qu·∫£n l√Ω ph√¢n quy·ªÅn h·ªá th·ªëng',
    actions: [
      { code: 'CREATE', name: 'T·∫°o quy·ªÅn', description: 'T·∫°o quy·ªÅn m·ªõi' },
      { code: 'READ', name: 'Xem quy·ªÅn', description: 'Xem danh s√°ch quy·ªÅn' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t quy·ªÅn', description: 'Ch·ªânh s·ª≠a quy·ªÅn' },
      { code: 'DELETE', name: 'X√≥a quy·ªÅn', description: 'X√≥a quy·ªÅn' }
    ]
  },
  activity_registration: {
    name: 'Qu·∫£n l√Ω ƒëƒÉng k√Ω ho·∫°t ƒë·ªông',
    description: 'Qu·∫£n l√Ω ƒëƒÉng k√Ω tham gia ho·∫°t ƒë·ªông',
    actions: [
      { code: 'CREATE', name: 'ƒêƒÉng k√Ω', description: 'ƒêƒÉng k√Ω tham gia ho·∫°t ƒë·ªông' },
      { code: 'READ', name: 'Xem ƒëƒÉng k√Ω', description: 'Xem danh s√°ch ƒëƒÉng k√Ω' },
      { code: 'APPROVE', name: 'Duy·ªát ƒëƒÉng k√Ω', description: 'Duy·ªát ƒëƒÉng k√Ω tham gia' },
      { code: 'REJECT', name: 'T·ª´ ch·ªëi ƒëƒÉng k√Ω', description: 'T·ª´ ch·ªëi ƒëƒÉng k√Ω' },
      { code: 'CANCEL', name: 'H·ªßy ƒëƒÉng k√Ω', description: 'H·ªßy ƒëƒÉng k√Ω ƒë√£ t·∫°o' }
    ]
  },
  student_feedback: {
    name: 'Ph·∫£n h·ªìi sinh vi√™n',
    description: 'Qu·∫£n l√Ω ph·∫£n h·ªìi c·ªßa sinh vi√™n',
    actions: [
      { code: 'SUBMIT', name: 'G·ª≠i ph·∫£n h·ªìi', description: 'G·ª≠i ph·∫£n h·ªìi v·ªÅ ho·∫°t ƒë·ªông' },
      { code: 'READ', name: 'Xem ph·∫£n h·ªìi', description: 'Xem danh s√°ch ph·∫£n h·ªìi' },
      { code: 'DELETE', name: 'X√≥a ph·∫£n h·ªìi', description: 'X√≥a ph·∫£n h·ªìi' }
    ]
  },
  student_profile: {
    name: 'H·ªì s∆° sinh vi√™n',
    description: 'Qu·∫£n l√Ω h·ªì s∆° sinh vi√™n',
    actions: [
      { code: 'CREATE', name: 'T·∫°o h·ªì s∆°', description: 'T·∫°o h·ªì s∆° sinh vi√™n' },
      { code: 'READ', name: 'Xem h·ªì s∆°', description: 'Xem h·ªì s∆° sinh vi√™n' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t h·ªì s∆°', description: 'Ch·ªânh s·ª≠a h·ªì s∆° sinh vi√™n' },
      { code: 'DELETE', name: 'X√≥a h·ªì s∆°', description: 'X√≥a h·ªì s∆° sinh vi√™n' }
    ]
  },
  staff_profile: {
    name: 'H·ªì s∆° c√°n b·ªô',
    description: 'Qu·∫£n l√Ω h·ªì s∆° c√°n b·ªô',
    actions: [
      { code: 'CREATE', name: 'T·∫°o h·ªì s∆°', description: 'T·∫°o h·ªì s∆° c√°n b·ªô' },
      { code: 'READ', name: 'Xem h·ªì s∆°', description: 'Xem h·ªì s∆° c√°n b·ªô' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t h·ªì s∆°', description: 'Ch·ªânh s·ª≠a h·ªì s∆° c√°n b·ªô' },
      { code: 'DELETE', name: 'X√≥a h·ªì s∆°', description: 'X√≥a h·ªì s∆° c√°n b·ªô' }
    ]
  },
  student_cohort: {
    name: 'Sinh vi√™n theo kh√≥a',
    description: 'Qu·∫£n l√Ω sinh vi√™n theo kh√≥a h·ªçc',
    actions: [
      { code: 'CREATE', name: 'Th√™m sinh vi√™n v√†o kh√≥a', description: 'Th√™m sinh vi√™n v√†o kh√≥a h·ªçc' },
      { code: 'READ', name: 'Xem danh s√°ch', description: 'Xem sinh vi√™n theo kh√≥a' },
      { code: 'DELETE', name: 'X√≥a kh·ªèi kh√≥a', description: 'X√≥a sinh vi√™n kh·ªèi kh√≥a' }
    ]
  },
  cohort: {
    name: 'Qu·∫£n l√Ω kh√≥a h·ªçc',
    description: 'Qu·∫£n l√Ω th√¥ng tin kh√≥a h·ªçc',
    actions: [
      { code: 'CREATE', name: 'T·∫°o kh√≥a', description: 'T·∫°o kh√≥a h·ªçc m·ªõi' },
      { code: 'READ', name: 'Xem kh√≥a', description: 'Xem th√¥ng tin kh√≥a h·ªçc' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t kh√≥a', description: 'Ch·ªânh s·ª≠a th√¥ng tin kh√≥a' },
      { code: 'DELETE', name: 'X√≥a kh√≥a', description: 'X√≥a kh√≥a h·ªçc' }
    ]
  },
  faculty: {
    name: 'Qu·∫£n l√Ω khoa',
    description: 'Qu·∫£n l√Ω th√¥ng tin khoa',
    actions: [
      { code: 'CREATE', name: 'T·∫°o khoa', description: 'T·∫°o khoa m·ªõi' },
      { code: 'READ', name: 'Xem khoa', description: 'Xem th√¥ng tin khoa' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t khoa', description: 'Ch·ªânh s·ª≠a th√¥ng tin khoa' },
      { code: 'DELETE', name: 'X√≥a khoa', description: 'X√≥a khoa' }
    ]
  },
  org_unit: {
    name: 'ƒê∆°n v·ªã t·ªï ch·ª©c',
    description: 'Qu·∫£n l√Ω ƒë∆°n v·ªã t·ªï ch·ª©c',
    actions: [
      { code: 'CREATE', name: 'T·∫°o ƒë∆°n v·ªã', description: 'T·∫°o ƒë∆°n v·ªã t·ªï ch·ª©c m·ªõi' },
      { code: 'READ', name: 'Xem ƒë∆°n v·ªã', description: 'Xem th√¥ng tin ƒë∆°n v·ªã' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t ƒë∆°n v·ªã', description: 'Ch·ªânh s·ª≠a th√¥ng tin ƒë∆°n v·ªã' },
      { code: 'DELETE', name: 'X√≥a ƒë∆°n v·ªã', description: 'X√≥a ƒë∆°n v·ªã t·ªï ch·ª©c' }
    ]
  },
  field: {
    name: 'Lƒ©nh v·ª±c ho·∫°t ƒë·ªông',
    description: 'Qu·∫£n l√Ω lƒ©nh v·ª±c ho·∫°t ƒë·ªông',
    actions: [
      { code: 'CREATE', name: 'T·∫°o lƒ©nh v·ª±c', description: 'T·∫°o lƒ©nh v·ª±c m·ªõi' },
      { code: 'READ', name: 'Xem lƒ©nh v·ª±c', description: 'Xem danh s√°ch lƒ©nh v·ª±c' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t lƒ©nh v·ª±c', description: 'Ch·ªânh s·ª≠a lƒ©nh v·ª±c' },
      { code: 'DELETE', name: 'X√≥a lƒ©nh v·ª±c', description: 'X√≥a lƒ©nh v·ª±c' }
    ]
  },
  post: {
    name: 'Qu·∫£n l√Ω b√†i ƒëƒÉng',
    description: 'Qu·∫£n l√Ω b√†i ƒëƒÉng v·ªÅ ho·∫°t ƒë·ªông',
    actions: [
      { code: 'CREATE', name: 'T·∫°o b√†i ƒëƒÉng', description: 'T·∫°o b√†i ƒëƒÉng m·ªõi' },
      { code: 'READ', name: 'Xem b√†i ƒëƒÉng', description: 'Xem danh s√°ch b√†i ƒëƒÉng' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t b√†i ƒëƒÉng', description: 'Ch·ªânh s·ª≠a b√†i ƒëƒÉng' },
      { code: 'DELETE', name: 'X√≥a b√†i ƒëƒÉng', description: 'X√≥a b√†i ƒëƒÉng' }
    ]
  },
  activity_eligibility: {
    name: 'ƒêi·ªÅu ki·ªán tham gia',
    description: 'Qu·∫£n l√Ω ƒëi·ªÅu ki·ªán tham gia ho·∫°t ƒë·ªông',
    actions: [
      { code: 'CREATE', name: 'T·∫°o ƒëi·ªÅu ki·ªán', description: 'T·∫°o ƒëi·ªÅu ki·ªán tham gia' },
      { code: 'READ', name: 'Xem ƒëi·ªÅu ki·ªán', description: 'Xem ƒëi·ªÅu ki·ªán tham gia' },
      { code: 'UPDATE', name: 'C·∫≠p nh·∫≠t ƒëi·ªÅu ki·ªán', description: 'Ch·ªânh s·ª≠a ƒëi·ªÅu ki·ªán' },
      { code: 'DELETE', name: 'X√≥a ƒëi·ªÅu ki·ªán', description: 'X√≥a ƒëi·ªÅu ki·ªán tham gia' }
    ]
  }
};

async function seedPermissions() {
  try {
    const db = mongoose.connection.db;
    
    console.log('üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈©...\n');
    await db.collection('permission').deleteMany({});
    await db.collection('action').deleteMany({});
    await db.collection('role_action').deleteMany({});
    console.log('   ‚úÖ ƒê√£ x√≥a permissions, actions, role_actions\n');
    
    console.log('='.repeat(70));
    console.log('üìù T·∫†O PERMISSIONS V√Ä ACTIONS');
    console.log('='.repeat(70) + '\n');
    
    const permissionMap = {}; // Map resource -> permission_id
    const actionMap = {}; // Map "resource:action_code" -> action_id
    
    // T·∫°o Permissions v√† Actions
    for (const [resource, config] of Object.entries(RESOURCES_ACTIONS)) {
      console.log(`üìã ${resource.toUpperCase()}: ${config.name}`);
      
      // T·∫°o Permission
      const permission = await db.collection('permission').insertOne({
        resource: resource,
        name: config.name,
        description: config.description
      });
      permissionMap[resource] = permission.insertedId;
      console.log(`   ‚úÖ Permission: ${config.name}`);
      
      // T·∫°o Actions cho permission n√†y
      for (const action of config.actions) {
        const actionDoc = await db.collection('action').insertOne({
          permission_id: permission.insertedId,
          resource: resource,  // Th√™m resource ƒë·ªÉ query nhanh h∆°n
          action_code: action.code,
          action_name: action.name,
          description: action.description,
          is_active: true
        });
        actionMap[`${resource}:${action.code}`] = actionDoc.insertedId;
        console.log(`      ‚Üí ${action.code}: ${action.name}`);
      }
      console.log();
    }
    
    console.log('='.repeat(70));
    console.log(`‚úÖ ƒê√£ t·∫°o ${Object.keys(permissionMap).length} permissions v√† ${Object.keys(actionMap).length} actions`);
    console.log('='.repeat(70) + '\n');
    
    // L·∫•y roles t·ª´ database
    console.log('üìù T·∫†O ROLE-ACTION MAPPING...\n');
    const roles = await db.collection('role').find({}).toArray();
    const roleMap = {};
    roles.forEach(role => {
      roleMap[role.name] = role._id;
    });
    
    console.log(`   T√¨m th·∫•y ${roles.length} roles: ${roles.map(r => r.name).join(', ')}\n`);
    
    // Import permissions config
    const permissionsConfig = require('./src/permissions.config');
    
    // T·∫°o role_action
    let totalRoleActions = 0;
    for (const [roleName, permissions] of Object.entries(permissionsConfig)) {
      if (!roleMap[roleName]) {
        console.log(`   ‚ö†Ô∏è  Role "${roleName}" kh√¥ng t·ªìn t·∫°i trong DB, b·ªè qua`);
        continue;
      }
      
      console.log(`   üîê ${roleName.toUpperCase()}: ${permissions.length} permissions`);
      
      for (const permission of permissions) {
        const [resource, action] = permission.split(':');
        const actionCode = action.toUpperCase().replace(/_/g, '_');
        const actionKey = `${resource}:${actionCode}`;
        
        if (!actionMap[actionKey]) {
          console.log(`      ‚ö†Ô∏è  Action kh√¥ng t·ªìn t·∫°i: ${actionKey}`);
          continue;
        }
        
        await db.collection('role_action').insertOne({
          role_id: roleMap[roleName],
          action_id: actionMap[actionKey],
          is_granted: true
        });
        totalRoleActions++;
      }
    }
    
    console.log(`\n‚úÖ ƒê√£ t·∫°o ${totalRoleActions} role-action mappings\n`);
    
    console.log('='.repeat(70));
    console.log('üéâ HO√ÄN T·∫§T!');
    console.log('='.repeat(70));
    console.log(`\nüìä T·ªîNG K·∫æT:`);
    console.log(`   ‚Ä¢ Permissions: ${Object.keys(permissionMap).length}`);
    console.log(`   ‚Ä¢ Actions: ${Object.keys(actionMap).length}`);
    console.log(`   ‚Ä¢ Role Actions: ${totalRoleActions}`);
    console.log(`   ‚Ä¢ Roles: ${roles.length} (${roles.map(r => r.name).join(', ')})`);
    console.log();
    
  } catch (error) {
    console.error('\n‚ùå L·ªñI:', error);
    throw error;
  }
}

async function main() {
  try {
    await connectDB();
    await seedPermissions();
  } catch (error) {
    console.error('Error:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üëã ƒê√£ ƒë√≥ng k·∫øt n·ªëi\n');
  }
}

main();


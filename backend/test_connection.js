require('dotenv').config();
const mongoose = require('mongoose');

async function testConnection() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    console.log(`üìç URI: ${process.env.MONGODB_URI || 'mongodb://localhost:27017/pbl6'}`);
    
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/pbl6', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');
    
    // L·∫•y th√¥ng tin server
    const serverInfo = await mongoose.connection.db.admin().serverInfo();
    console.log(`\nüìä MongoDB Server Version: ${serverInfo.version}`);
    
    // List databases
    const admin = mongoose.connection.db.admin();
    const { databases } = await admin.listDatabases();
    console.log('\nüìö Databases c√≥ s·∫µn:');
    databases.forEach(db => {
      console.log(`  - ${db.name} (${(db.sizeOnDisk / 1024 / 1024).toFixed(2)} MB)`);
    });
    
    // List collections trong database hi·ªán t·∫°i
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log(`\nüìÅ Collections trong database "${mongoose.connection.db.databaseName}":`);
    if (collections.length === 0) {
      console.log('  (ch∆∞a c√≥ collection n√†o - ch·∫°y seed script ƒë·ªÉ t·∫°o d·ªØ li·ªáu)');
    } else {
      for (const col of collections) {
        const count = await mongoose.connection.db.collection(col.name).countDocuments();
        console.log(`  - ${col.name} (${count} documents)`);
      }
    }
    
    // Test models
    console.log('\nüß™ Test Models:');
    try {
      const Permission = require('./src/models/permission.model');
      const UserPermission = require('./src/models/user_permission.model');
      console.log('  ‚úÖ Permission model - OK');
      console.log('  ‚úÖ UserPermission model - OK');
      
      // Count documents
      const permCount = await Permission.countDocuments();
      const userPermCount = await UserPermission.countDocuments();
      console.log(`\nüìà Th·ªëng k√™:`);
      console.log(`  - Permissions: ${permCount}`);
      console.log(`  - User Permissions: ${userPermCount}`);
      
      if (permCount > 0) {
        console.log('\nüìã Permissions m·∫´u:');
        const perms = await Permission.find().limit(3).select('name_per description details');
        perms.forEach(p => {
          console.log(`  - ${p.name_per}: ${p.details.length} actions`);
        });
      }
    } catch (modelError) {
      console.log('  ‚ö†Ô∏è  L·ªói khi load models:', modelError.message);
    }
    
    console.log('\nüí° Tips:');
    console.log('  - Ch·∫°y seed: node src/seed_permission_system.js');
    console.log('  - Start server: npm run dev');
    console.log('  - Xem h∆∞·ªõng d·∫´n: cat PERMISSION_USAGE.md');
    
  } catch (error) {
    console.error('\n‚ùå L·ªói k·∫øt n·ªëi MongoDB:');
    console.error(`   ${error.message}`);
    console.error('\nüîß Gi·∫£i ph√°p:');
    console.error('   1. Ki·ªÉm tra MongoDB ƒë√£ ch·∫°y: mongosh');
    console.error('   2. Ki·ªÉm tra MONGODB_URI trong file .env');
    console.error('   3. Ki·ªÉm tra port 27017 c√≥ available kh√¥ng');
    console.error('   4. Restart MongoDB service');
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('\nüëã ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
    }
    process.exit(0);
  }
}

testConnection();


